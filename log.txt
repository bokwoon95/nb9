catalog.go
fs.go
fs_local.go
fs_remote.go
init.go
notebrew.go
site_generator.go
files.go
createsite.go
deletesite.go
createfolder.go
createfile.go
delete.go
search.go
cut/copy/paste/rename
uploadfile.go
...
serve_http.go
notebrew/main.go

anything in pages/*
    source file is directly correlated to an index.html in its output/* folder
    output folder can contain .css, .js and .md files (just regard all files?)
anything in posts/*
    source file is directly correlated to an index.html in its output/posts/* folder
    output folder can contain .jpeg, .jpg, .png, .webp, .gif files (just regard all files?)
whenever a post is created or deleted, we regenerate the PostList. Only for create and delete, for update we don't do anything because the user will potentially update a post many times.

TODO: createfile to allow users to specify the text body as well, and for notes and output/themes allow them to pick the file extension type. The editor should switch syntax highlighting dynamically, depending on the value in the select input.
TODO: when a category is created, also create the post list. when a category is deleted, also delete the post list.
TODO: clipboard.go get paste to work
TODO: rename.go
TODO: site_generator.go GeneratePostList
    TODO: executeAndRewriteCDNLinks
TODO: download.go
    - "download" becomes a new contextual button users can use on selected files, just like cut/copy/delete.
    - a new "download site" button becomes added to a site, which people can use to export their site folders (and upload it back using plain old uploadfile).
TODO: /users/language/?redirect=foo/bar/baz which lets people set the language code in a cookie and redirects them back to the page. Every page is language-aware by pulling out the language code from the cookie. And then in the notebrew navbar we have a little language switcher icon (a globe) that simply links to /users/language/.
    NOTE: for languages don't parse all the language json files and keep them in memory, instead implement a TTL using timers and timer.Reset everytime someone requests for that language file. Once the timer expires, delete it from the map.
    BEFORE YOU DO THIS: look at how big the language files are. If it's an acceptable cost to keep them all in memory then just keep it in memory and reads will be much faster since you don't have to guard reads behind a mutex.
TODO: rewrite the cookie handling portion of directory.js to mirror the sort/order logic on the server.
TODO: if CMSDomain is not localhost && the CDN link is configured in cdn.txt, we will intercept all generated links and rewrite relative links to CDN links. This means if you're generating pages on localhost, the links are always relative (since GitHub pages etc already host files on their own CDN). And if the user runs their own server but doesn't want to set up the CDN, they can skip configuring the CDN and all the links will stay relative (for max flexibility). Whenever links are rewritten to CDN links you do lose some file flexibility as it means they can no longer be plopped anywhere and just work, it assumes a cdn is up and available as well.
TODO: a little "view data" link on file.html that simply the href "?data". When clicked, it generates live data of the page in real time if we're on a page.html, or the latest post/last page data if we're on post.html/postlist.html.

https://www.cs.umd.edu/~ben/goldenrules.html
- Every user action should have feedback. Common user actions can have modest feedback, major user actions should have big feedback.
- Permit easy reversal of actions.

ARM shared vCPUs from Hetzner (trivially upgradeable up to 16 cores, 32 GB RAM and 320 GB disk space).
Backblaze for Storage
BunnyCDN for CDN

notebrew-config/
notebrew-users.db
notebrew-files/
notebrew-files.db
notebrew-objects/

notebrew start | notebrew stop | notebrew status

notebrew-config/metrics.json (site-specific metrics? or not, since we are aiming to put everything on one server at first)
notebrew-config/metrics.txt
Requests per second (mean) = xxx
Requests per second (Q1)   = xxx
Requests per second (Q2)   = xxx
Requests per second (Q3)   = xxx
Latency (mean) = xxx
Latency (Q1)   = xxx
Latency (Q2)   = xxx
Latency (Q3)   = xxx

TODO: wall of banners? submit your banner? randomly arranged banners?

TODO: i18n.go
01. en
02. ms
03. zh
04. ja
05. ko
06. es
07. fr
08. it
09. ru
10. pt
