catalog.go
fs.go
fs_local.go
fs_remote.go
creation_time.go
creation_time_linux.go
init.go
notebrew.go
site_generator.go
files.go
regenerate.go
    /files/@bokwoon/regenerate/
    /files/@bokwoon/regeneratelist/?category=abcd
createsite.go
deletesite.go
createfolder.go
createfile.go
delete.go
search.go
cut/copy/paste/rename
uploadfile.go
...
serve_http.go
notebrew/main.go

TODO: UAT the clipboard/paste feature. Some bugs:
    - copy some html/txt files from notes and try to paste it into the posts folder. why does it fail with 500 Internal Server Error "src file is invalid or is a directory containing files that are invalid"?
    - When showing the clipboard info in file.html, how to construct the paste form accordingly such that it will paste into the page/post's output directory instead of the file itself?
    - post markdown files don't just end with .md, they also start with a timestamp prefix. What happens
TODO: can we avoid saving so much file data into the session? Can we just load the PostRedirectGet map from the session but read the rest of the stuff from the file as usual? I'm not comfortable with persisting kilobytes of text over and over into flash sessions whenever the user saves.
TODO: rework listDirectory such that fromTime is response.FromTime and always pulls from the fromtime query param instead of the from query param (same for beforeTime). Then from is always used as the tiebreaker so that even if there are millions of files with the same mod_time or creation_time, we can still paginate them chunk by chunk using the name as the tiebreaker.
TODO: modify search.go such that it takes into account sort=created or sort=edited. The options: default sort | sort by creation time | sort by modification time
TODO: clipboard: if a destFile exists, no matter whether it's file or folder, paste will be auto rejected.
    - 20 MB total upload limit (includes all files). When we hit the limit in the middle of a file, what happens is we get an error on Read() which should be caught and checked for ErrTooLarge or something and sent to badRequest().
TODO: big turn: remove clipboard (cut/copy/paste). condense "site/list settings" and "regenerate site/list" back into a miscellaneous dropdown button, because we will need to accomodate an "upload file" link as well and there's no space.
    - Uploading files only works for individual files, it doesn't work for folders. If there is a file conflict it simply backs off for that file and refuses to overwrite.
    - Uploaded files do trigger page/post/postlist regeneration when appropriate.
    - All files have a little "download" button in the dropdown menu. You can use checkboxes to select multiple files to download. You can only download files not folders, for feature parity with uploading files.
TODO: Import/Export? How to handle?
TODO: clipboard.go get paste to work
TODO: also add the regenerate list button to the output page of a post category
TODO: structured template error
    We *have* to parse out template errors because that's the only way we can adjust the line number by the number of lines we add at the start of the template (if we added any).
    ParseTemplate() error => parseTemplate() (numPrefixLines int, err error)
    If we assume template errors follow this format: "template: {filePath}:{lineNr}: {errmsg}", we can parse template errors accordingly and send it out as structured JSON objects instead of plain strings, which would allow us to highlight the problematic lines in the codemirror editor.
    {
        "abcd.html": [
            {"line": 3, "msg": "unclosed action"},
            {"line": 5, "msg": "unterminated quoted string"},
            {"line": 10, "msg": "executing \"abcd.html\" at <throw>: wrong number of args for throw: want 1 got 0"},
        ]
    }
    - parse and execution errors always contain only one line number, because html/template stops at the first error
    - internal templates ending in html can be multiple errors. these have no line number.
    - external templates not starting with /themes/ can be multiple errors. these have no line number.
    - external templates ending in a circular reference can be multiple errors. these have no line number.
    - external templates that don't exist can only be one error. these have no line number.
    - external templates being a dir instead of a file can only be one error. these have no line number.
    Given the massive number of error types with no line number, maybe it is better to just not highlight line numbers?
TODO: rename.go
TODO: download.go
    - "download" becomes a new contextual button users can use on selected files, just like cut/copy/delete.
    - a new "download site" button becomes added to a site, which people can use to export their site folders (and upload it back using plain old uploadfile).
    - a corresponding "upload files" option becomes available in the plus icon dropdown menu (separated from create file/create folder by a <hr>).
TODO: rewrite the cookie handling portion of directory.js to mirror the sort/order logic on the server.
TODO: /users/language/?redirect=foo/bar/baz which lets people set the language code in a cookie and redirects them back to the page. Every page is language-aware by pulling out the language code from the cookie. And then in the notebrew navbar we have a little language switcher icon (a globe) that simply links to /users/language/.
    NOTE: for languages don't parse all the language json files and keep them in memory, instead implement a TTL using timers and timer.Reset everytime someone requests for that language file. Once the timer expires, delete it from the map.
    BEFORE YOU DO THIS: look at how big the language files are. If it's an acceptable cost to keep them all in memory then just keep it in memory and reads will be much faster since you don't have to guard reads behind a mutex.
TODO: a little "view data" link on file.html that simply the href "?data". When clicked, it generates live data of the page in real time if we're on a page.html, or the latest post/last page data if we're on post.html/postlist.html.

-- sqlite
select unhex(items.value->>0, '-') as file_id, items.value->>1 as file_path
from json_each('[["e4ac0341-0fd0-4b7c-95f6-f53d9273638c","one"],["f026a58e-8739-4105-b74f-3f2aa8244e4d","two"]]') as items;
select items.value
from json_each('["one","two"]') as items;
-- postgres
select (items.value->>0)::uuid as file_id, items.value->>1 as file_path
from json_array_elements('[["e4ac0341-0fd0-4b7c-95f6-f53d9273638c","one"],["f026a58e-8739-4105-b74f-3f2aa8244e4d","two"]]') as items;
select items.value
from json_array_elements_text('["one","two"]') as items;
-- mysql
select uuid_to_bin(items.file_id) as file_id, items.file_path
from json_table('[["e4ac0341-0fd0-4b7c-95f6-f53d9273638c","one"],["f026a58e-8739-4105-b74f-3f2aa8244e4d","two"]]', '$[*]' columns (file_id char(32) path '$[0]', file_path varchar(500) path '$[1]')) as items;
select items.file_path
from json_table('["one","two"]', '$[*]' columns (file_path varchar(500) path '$')) as items;

files/subscriptions.opml -> view the subscriptions, Google Reader view
files/subscriptions.opml/create/ -> add a new subscription
files/opml/ -> this is the trickiest part. this is where the opml rss feeds are stored site-wide, shared between all subscription files. What's the eviction policy? How do we efficiently join? If we can't efficiently join to display a Google Reader view to the user, should we drop the "backed by a single OPML file" idea and resort to database tables instead? Then we can offer to import/export the data as a opml files. But that means a user not using UsersDB will not be able to use notebrew locally purely as an rss feed reader.

NOTE: `notebrew regenerate` will regenerate all sites. `notebrew regenerate -site ''` will only regenerate the base site. This is great if you change the ImgDomain and need to regenerate all pages in all sites to keep image links up-to-date.

https://www.cs.umd.edu/~ben/goldenrules.html
- Every user action should have feedback. Common user actions can have modest feedback, major user actions should have big feedback.
- Permit easy reversal of actions.

ARM shared vCPUs from Hetzner (trivially upgradeable up to 16 cores, 32 GB RAM and 320 GB disk space).
Backblaze for Storage
BunnyCDN for CDN

notebrew-config/
notebrew-users.db
notebrew-files/
notebrew-files.db
notebrew-objects/

notebrew start | notebrew stop | notebrew status

notebrew-config/metrics.json (site-specific metrics? or not, since we are aiming to put everything on one server at first)
notebrew-config/metrics.txt
Requests per second (mean) = xxx
Requests per second (Q1)   = xxx
Requests per second (Q2)   = xxx
Requests per second (Q3)   = xxx
Latency (mean) = xxx
Latency (Q1)   = xxx
Latency (Q2)   = xxx
Latency (Q3)   = xxx

TODO: wall of banners? submit your banner? randomly arranged banners?

TODO: i18n.go
01. en
02. ms
03. zh
04. ja
05. ko
06. es
07. fr
08. it
09. ru
10. pt
