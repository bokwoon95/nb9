catalog.go
fs.go
fs_local.go
fs_remote.go
creation_time.go
creation_time_linux.go
init.go
notebrew.go
site_generator.go
rootdirectory.go
directory.go
file.go
regenerate.go
createsite.go
deletesite.go
createfolder.go
createfile.go
delete.go
search.go
clipboard.go
uploadfile.go
rename.go
serve_http.go
notebrew/main.go

TODO: no choice, editing themes/post.html should regenerate all posts and editing themes/postlist.html should regenerate all post lists. It's too clunky otherwise for people to tweak their own post templates, bc they have to keep switching to a third tab to regenerate site (which is more intensive than just regenerating posts to begin with).
    - This means we should remove 'regeneratelist' entirely because it can be replicated by simply saving postlist.html. A win!
    - and whenever we save post.html and regenerate all posts or save postlist.html and regenerate all post lists, display the number of files generated and time it took.
        - actually, extend that to pages and posts in general. only editing html template/css/javascript files won't regenerate anything.
    - ooh and when we edit a markdown file belonging to a page, we must also regenerate that page.
TODO: site.json: site settings needs a way for users to customize their navbar items. the default is 'home' and 'posts', but the user may choose to link it to something else. as usual, site setting changes will trigger a whole-site rebuild.
    - Do I want users to be able to create arbitrary JSON files? But if I do, they will start asking for the ability to create TOML or YAML files as well (in themes). I really don't want JSON to be a special file format.
    - files/settings.json
    - files/posts/settings.json
TODO: make site deletion prompt the user to type in the full site name into an input and delete only if it matches. Bc the cost of deleting an entire site it too high, it could be years of someone's effort gone in an instant (and backups being the only option to restore data).
TODO: now that directory.html is pretty much set in stone, go about deleting extraneous SVGs so we don't bloat the app.
TODO: oh boy pagination on output/themes is broken again (why? investigate)
TODO: huge pivot: images can now have text associated with it (which is also fulltext indexed and searchable). So you can search for images too.
    - Images instead of "view" will get an "edit" as well. And we can do stuff like rotate it and stuff.
    - The best part is whatever text is associated with the image automatically becomes its alt text.
    - files.go has to be modified *again* to make it accomodate showing image files. Also, image files are able to paginate to the previous and next image (kind of like a manga reader ðŸ¤”).
    - The only problem is: all this text gets thrown out the moment you export to a folder. It's not possible to store text directly in image files, nor am I interested in bodging this in the filesystem. Image text is editable only if you're using the database backend, which is one more reason to use the database backend instead of the filesystem backend. At least it degrades gracefully.
TODO: don't make /users/signup/ a built-in page in notebrew. Instead, admins are only expected to create new users through the notebrew CLI command. So notebrew doesn't care about a mailer, nor does it care about configuring SMTP credentials.
    - notebrew still has to know about captcha providers because it displays a captcha on failed logins though.
    - `notebrew createuser` allows the admin to generate an account creation link which they can distribute to other users, or they can manually create the users themselves and hand them the username/password. Password resets are handled manually through the CLI command as well, so notebrew never has to concern itself with sending an email reset password.
    - However, we *do* have to devise a handler that can handle signups and email resets. The only bonus is we don't have to make that code resuable by others, so we can hardcode certain mail API expectations and stuff. We don't have make it accomodate multiple mailer services.
TODO: download.go
    - "download" becomes a new contextual button users can use on selected files, just like cut/copy/delete.
    - a new "download site" button becomes added to a site, which people can use to export their site folders (and upload it back using plain old uploadfile).
    - a corresponding "upload files" option becomes available in the plus icon dropdown menu (separated from create file/create folder by a <hr>).

image optimization expects a $PATH entry that accepts arguments in this format:
$ nbrew-process-img 0xfffff.raw.jpg 0xfffff.jpg

God the biggest benefit would be me finally having a personal online vault of my own to store fleeting notes and everything I read on the internet everyday.

-- sqlite
select unhex(items.value->>0, '-') as file_id, items.value->>1 as file_path
from json_each('[["e4ac0341-0fd0-4b7c-95f6-f53d9273638c","one"],["f026a58e-8739-4105-b74f-3f2aa8244e4d","two"]]') as items;
select items.value
from json_each('["one","two"]') as items;
-- postgres
select (items.value->>0)::uuid as file_id, items.value->>1 as file_path
from json_array_elements('[["e4ac0341-0fd0-4b7c-95f6-f53d9273638c","one"],["f026a58e-8739-4105-b74f-3f2aa8244e4d","two"]]') as items;
select items.value
from json_array_elements_text('["one","two"]') as items;
-- mysql
select uuid_to_bin(items.file_id) as file_id, items.file_path
from json_table('[["e4ac0341-0fd0-4b7c-95f6-f53d9273638c","one"],["f026a58e-8739-4105-b74f-3f2aa8244e4d","two"]]', '$[*]' columns (file_id char(32) path '$[0]', file_path varchar(500) path '$[1]')) as items;
select items.file_path
from json_table('["one","two"]', '$[*]' columns (file_path varchar(500) path '$')) as items;

files/subscriptions.opml -> view the subscriptions, Google Reader view
files/subscriptions.opml/create/ -> add a new subscription
files/opml/ -> this is the trickiest part. this is where the opml rss feeds are stored site-wide, shared between all subscription files. What's the eviction policy? How do we efficiently join? If we can't efficiently join to display a Google Reader view to the user, should we drop the "backed by a single OPML file" idea and resort to database tables instead? Then we can offer to import/export the data as a opml files. But that means a user not using UsersDB will not be able to use notebrew locally purely as an rss feed reader.

NOTE: `notebrew regenerate` will regenerate all sites. `notebrew regenerate -site ''` will only regenerate the base site. This is great if you change the ImgDomain and need to regenerate all pages in all sites to keep image links up-to-date. notebrew regenerate will rename any posts it finds without a timestamp prefix to include the timestamp prefix (if creation_time can be sourced).

https://www.cs.umd.edu/~ben/goldenrules.html
- Every user action should have feedback. Common user actions can have modest feedback, major user actions should have big feedback.
- Permit easy reversal of actions.

ARM shared vCPUs from Hetzner (trivially upgradeable up to 16 cores, 32 GB RAM and 320 GB disk space).
Backblaze for Storage
BunnyCDN for CDN

notebrew-config/
notebrew-users.db
notebrew-files/
notebrew-files.db
notebrew-objects/

notebrew start | notebrew stop | notebrew status

notebrew-config/metrics.json (site-specific metrics? or not, since we are aiming to put everything on one server at first)
notebrew-config/metrics.txt
Requests per second (mean) = xxx
Requests per second (Q1)   = xxx
Requests per second (Q2)   = xxx
Requests per second (Q3)   = xxx
Latency (mean) = xxx
Latency (Q1)   = xxx
Latency (Q2)   = xxx
Latency (Q3)   = xxx

TODO: wall of banners? submit your banner? randomly arranged banners?

TODO: i18n.go
01. en
02. ms
03. zh
04. ja
05. ko
06. es
07. fr
08. it
09. ru
10. pt
