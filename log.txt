catalog.go
fs.go
fs_local.go
fs_remote.go
init.go
notebrew.go
site_generator.go
files.go
regenerate.go
    /files/@bokwoon/regenerate/
    /files/@bokwoon/regeneratelist/?category=abcd
createsite.go
deletesite.go
createfolder.go
createfile.go
delete.go
search.go
cut/copy/paste/rename
uploadfile.go
...
serve_http.go
notebrew/main.go

anything in pages/*
    source file is directly correlated to an index.html in its output/* folder
    output folder can contain .css, .js and .md files (just regard all files?)
anything in posts/*
    source file is directly correlated to an index.html in its output/posts/* folder
    output folder can contain .jpeg, .jpg, .png, .webp, .gif files (just regard all files?)

TODO: structured template error
    If we assume template errors follow this format: "template: {filePath}:{lineNr}: {errmsg}", we can parse template errors accordingly and send it out as structured JSON objects instead of plain strings, which would allow us to highlight the problematic lines in the codemirror editor.
    {
        "abcd.html": [
            {"line": 3, "msg": "unclosed action"},
            {"line": 5, "msg": "unterminated quoted string"},
            {"line": 10, "msg": "executing \"abcd.html\" at <throw>: wrong number of args for throw: want 1 got 0"},
        ]
    }
    - parse and execution errors always contain only one line number, because html/template stops at the first error
    - internal templates ending in html can be multiple errors. these have no line number.
    - external templates not starting with /themes/ can be multiple errors. these have no line number.
    - external templates ending in a circular reference can be multiple errors. these have no line number.
    - external templates that don't exist can only be one error. these have no line number.
    - external templates being a dir instead of a file can only be one error. these have no line number.
    Given the massive number of error types with no line number, maybe it is better to just not highlight line numbers?
TODO: clipboard.go get paste to work
TODO: rename.go
TODO: listDirectory file sorting
TODO: download.go
    - "download" becomes a new contextual button users can use on selected files, just like cut/copy/delete.
    - a new "download site" button becomes added to a site, which people can use to export their site folders (and upload it back using plain old uploadfile).
    - a corresponding "upload files" option becomes available in the plus icon dropdown menu (separated from create file/create folder by a <hr>).
TODO: rewrite the cookie handling portion of directory.js to mirror the sort/order logic on the server.
TODO: /users/language/?redirect=foo/bar/baz which lets people set the language code in a cookie and redirects them back to the page. Every page is language-aware by pulling out the language code from the cookie. And then in the notebrew navbar we have a little language switcher icon (a globe) that simply links to /users/language/.
    NOTE: for languages don't parse all the language json files and keep them in memory, instead implement a TTL using timers and timer.Reset everytime someone requests for that language file. Once the timer expires, delete it from the map.
    BEFORE YOU DO THIS: look at how big the language files are. If it's an acceptable cost to keep them all in memory then just keep it in memory and reads will be much faster since you don't have to guard reads behind a mutex.
TODO: a little "view data" link on file.html that simply the href "?data". When clicked, it generates live data of the page in real time if we're on a page.html, or the latest post/last page data if we're on post.html/postlist.html.

https://www.cs.umd.edu/~ben/goldenrules.html
- Every user action should have feedback. Common user actions can have modest feedback, major user actions should have big feedback.
- Permit easy reversal of actions.

ARM shared vCPUs from Hetzner (trivially upgradeable up to 16 cores, 32 GB RAM and 320 GB disk space).
Backblaze for Storage
BunnyCDN for CDN

notebrew-config/
notebrew-users.db
notebrew-files/
notebrew-files.db
notebrew-objects/

notebrew start | notebrew stop | notebrew status

notebrew-config/metrics.json (site-specific metrics? or not, since we are aiming to put everything on one server at first)
notebrew-config/metrics.txt
Requests per second (mean) = xxx
Requests per second (Q1)   = xxx
Requests per second (Q2)   = xxx
Requests per second (Q3)   = xxx
Latency (mean) = xxx
Latency (Q1)   = xxx
Latency (Q2)   = xxx
Latency (Q3)   = xxx

TODO: wall of banners? submit your banner? randomly arranged banners?

TODO: i18n.go
01. en
02. ms
03. zh
04. ja
05. ko
06. es
07. fr
08. it
09. ru
10. pt
